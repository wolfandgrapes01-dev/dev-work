cmake_minimum_required(VERSION 4.0)
project(example LANGUAGES CXX)

# 1️⃣ Pybind 模块定义
add_library(example MODULE
    binding.cpp
    myclass.cpp
    myclass.h
)

# 4️⃣ MSVC 环境配置
if (MSVC)
    message(STATUS "🔧 Detected MSVC toolchain, enabling MFC/ATL support...")

    # ------------------------------------------------------------------
    # 【关键定义】必须让 MFC/ATL 在 DLL 模式下工作
    # ------------------------------------------------------------------
    target_compile_definitions(example PRIVATE
        UNICODE
        _UNICODE
        _AFXDLL                         # 使用共享 MFC DLL（避免静态链接冲突）
        _USRDLL
        _WINDOWS
        _WINDLL
        _ATL_CSTRING_EXPLICIT_CONSTRUCTORS
        VC_EXTRALEAN                    # 精简 MFC 头
        WIN32_LEAN_AND_MEAN             # 精简 Windows 头
    )

    # ------------------------------------------------------------------
    # 【MFC/ATL 必要的库链接】
    # ------------------------------------------------------------------
    # ⚠️ 不要只写 mfc140u.lib / atls.lib，必须补上依赖的系统库
    target_link_libraries(example PRIVATE
        mfc140u.lib
        atls.lib
        ole32.lib
        oleaut32.lib
        comdlg32.lib
        user32.lib
        gdi32.lib
        advapi32.lib
        shell32.lib
        uuid.lib
        uxtheme.lib
    )

    # ------------------------------------------------------------------
    # 【包含头文件路径】
    # CMake 不会自动找到 ATL/MFC 的 include，需要我们帮它定位
    # ------------------------------------------------------------------
    file(GLOB VS_ATL_PATH
        "C:/Program Files/Microsoft Visual Studio/2022/*/VC/Tools/MSVC/*/atlmfc/include"
    )
    if (VS_ATL_PATH)
        message(STATUS "✅ Found ATL/MFC include: ${VS_ATL_PATH}")
        target_include_directories(example PRIVATE ${VS_ATL_PATH})
    else()
        message(FATAL_ERROR "❌ Could not locate ATL/MFC include path. Check VS installation.")
    endif()

    # ------------------------------------------------------------------
    # 【生成选项】
    # ------------------------------------------------------------------
    target_link_options(example PRIVATE
        /SUBSYSTEM:WINDOWS     # Windows 模块（无 console）
        /NOLOGO
    )
endif()

# 6️⃣ 如果有 shared.lib（自己的项目库）
target_link_libraries(example PRIVATE mysharedlib)


ーーーーーーーーーー
COMMAND
ーーーーーーーーーー
# 32-bit
cmake -G "Visual Studio 17 2022" -A Win32 -B build32
cmake --build build32 --config Release

# 64-bit
cmake -G "Visual Studio 17 2022" -A x64 -B build64
cmake --build build64 --config Release


ーーーーーーーーーー
ーーーーーーーーーー
ーーーーーーーーーー
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\<版本号>\bin\Hostx64\x64\dumpbin.exe

2.	搜索：
🔍 “x64 Native Tools Command Prompt for VS 2022”
或
🔍 “x86 Native Tools Command Prompt for VS 2022”


dumpbin /DEPENDENTS build64/example.pyd







cmake_minimum_required(VERSION 3.21)
project(example LANGUAGES CXX)

add_library(example MODULE
    binding.cpp
    myclass.cpp
    myclass.h
)

set_target_properties(example PROPERTIES
    PREFIX ""
    SUFFIX ".pyd"
)

target_compile_features(example PRIVATE cxx_std_17)

if (MSVC)
    message(STATUS "🔧 MSVC detected, enabling static MFC/ATL support")

    # 检测架构
    if (CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(ARCH_DIR "x64")
    else()
        set(ARCH_DIR "x86")
    endif()

    file(GLOB VS_ATL_PATH
        "C:/Program Files/Microsoft Visual Studio/2022/*/VC/Tools/MSVC/*/atlmfc/include"
    )
    file(GLOB VS_ATL_LIB
        "C:/Program Files/Microsoft Visual Studio/2022/*/VC/Tools/MSVC/*/atlmfc/lib/${ARCH_DIR}"
    )

    target_include_directories(example PRIVATE ${VS_ATL_PATH})
    link_directories(${VS_ATL_LIB})

    # ✅ 静态链接 MFC/ATL
    target_compile_options(example PRIVATE
        /MT            # 静态 CRT
        /MP            # 多核编译
    )

    # ❌ 去掉 _AFXDLL，不要定义
    target_compile_definitions(example PRIVATE
        UNICODE
        _UNICODE
        _USRDLL
        _WINDOWS
        _WINDLL
        _ATL_CSTRING_EXPLICIT_CONSTRUCTORS
        VC_EXTRALEAN
        WIN32_LEAN_AND_MEAN
    )

    # ✅ 链接静态库版本
    target_link_libraries(example PRIVATE
        mfcs140.lib     # 静态 MFC
        atls.lib        # 静态 ATL
        ole32.lib
        oleaut32.lib
        comdlg32.lib
        user32.lib
        gdi32.lib
        advapi32.lib
        shell32.lib
        uuid.lib
        uxtheme.lib
    )

    target_link_options(example PRIVATE
        /SUBSYSTEM:WINDOWS
        /NOLOGO
    )
endif()
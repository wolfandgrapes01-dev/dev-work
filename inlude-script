import os
import re
import csv

root_dir = r"C:\path\to\your\root"
extensions = ('.cpp', '.c', '.h', '.hpp')
include_pattern = re.compile(r'#include\s+[<"](.+?)[>"]')

# 文件直接依赖表：{文件绝对路径: [include原写法列表]}
dependency_map = {}

# --------------------------
# 1️⃣ 找 src 文件夹
# --------------------------
def find_src_dirs(root):
    src_dirs = []
    for dirpath, dirnames, _ in os.walk(root):
        dirnames[:] = [d for d in dirnames if d.lower() != ".svn"]
        for d in dirnames:
            if d.lower() == "src":
                src_dirs.append(os.path.join(dirpath, d))
    return src_dirs

# --------------------------
# 2️⃣ 分析 include（忽略注释，保留源码写法）
# --------------------------
def analyze_includes(src_dir):
    for dirpath, dirnames, filenames in os.walk(src_dir):
        dirnames[:] = [d for d in dirnames if d.lower() != ".svn"]

        for filename in filenames:
            if not filename.endswith(extensions):
                continue

            full_path = os.path.abspath(os.path.join(dirpath, filename))
            includes = []

            try:
                with open(full_path, 'r', encoding='utf-8', errors='ignore') as f:
                    in_block_comment = False
                    for line in f:
                        stripped = line.strip()

                        # 处理多行注释
                        if in_block_comment:
                            if '*/' in stripped:
                                in_block_comment = False
                                stripped = stripped.split('*/',1)[1]
                            else:
                                continue

                        if '/*' in stripped:
                            if '*/' in stripped:
                                stripped = re.sub(r'/\*.*?\*/', '', stripped)
                            else:
                                in_block_comment = True
                                stripped = stripped.split('/*',1)[0]

                        # 去掉单行注释
                        stripped = re.sub(r'//.*', '', stripped).strip()
                        if not stripped:
                            continue

                        match = include_pattern.search(stripped)
                        if match:
                            include_file = match.group(1)  # 保留源码写法
                            includes.append(include_file)

                if includes:
                    dependency_map[full_path] = includes

            except Exception as e:
                print(f"⚠️ 读取失败: {full_path} - {e}")

# --------------------------
# 3️⃣ 递归解析依赖（保留顶层对象路径）
# --------------------------
def resolve_recursive_dependencies(file_path, visited=None):
    if visited is None:
        visited = set()
    if file_path in visited:
        return []
    visited.add(file_path)

    if file_path not in dependency_map:
        return []

    result = []
    for dep in dependency_map[file_path]:
        result.append((file_path, dep))
        # 只有当 dep 本身也在 dependency_map 中才递归
        for candidate in dependency_map:
            if os.path.basename(dep) == os.path.basename(candidate):
                result.extend(resolve_recursive_dependencies(candidate, visited))
                break
    return result

# --------------------------
# 主流程
# --------------------------
src_dirs = find_src_dirs(root_dir)
print(f"🔍 找到 {len(src_dirs)} 个 src 文件夹。")

for src in src_dirs:
    print(f"  → 分析 {src}")
    analyze_includes(src)

# 输出完整递归依赖
all_recursive_deps = []
for file_path in dependency_map:
    all_recursive_deps.extend(resolve_recursive_dependencies(file_path))

# 仅保留顶层对象路径，依赖对象保留源码写法
output_file = os.path.join(root_dir, "dependencies_recursive.csv")
with open(output_file, 'w', newline='', encoding='utf-8') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(["source_file", "included_file"])
    for src, dep in all_recursive_deps:
        top_level_src = src  # 顶层对象的绝对路径
        writer.writerow([top_level_src, dep])

print(f"\n✅ 递归依赖分析完成，结果已输出到：{output_file}")
print(f"📦 共发现 {len(all_recursive_deps)} 条依赖关系。")
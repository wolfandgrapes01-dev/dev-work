import os
import re

root_dir = r"C:\path\to\your\root"
extensions = ('.cpp', '.c', '.h', '.hpp')
include_pattern = re.compile(r'#include\s+[<"](.+?)[>"]')

# 文件直接依赖表
# {文件绝对路径: [依赖对象绝对路径列表]}
dependency_map = {}

# --------------------------
# 1️⃣ 找 src 文件夹
# --------------------------
def find_src_dirs(root):
    src_dirs = []
    for dirpath, dirnames, _ in os.walk(root):
        dirnames[:] = [d for d in dirnames if d.lower() != ".svn"]
        for d in dirnames:
            if d.lower() == "src":
                src_dirs.append(os.path.join(dirpath, d))
    return src_dirs

# --------------------------
# 2️⃣ 分析 include（去除注释，补全路径）
# --------------------------
def analyze_includes(src_dir):
    for dirpath, dirnames, filenames in os.walk(src_dir):
        dirnames[:] = [d for d in dirnames if d.lower() != ".svn"]

        for filename in filenames:
            if not filename.endswith(extensions):
                continue

            full_path = os.path.abspath(os.path.join(dirpath, filename))
            includes = []

            try:
                with open(full_path, 'r', encoding='utf-8', errors='ignore') as f:
                    in_block_comment = False
                    for line in f:
                        stripped = line.strip()

                        # 多行注释处理
                        if in_block_comment:
                            if '*/' in stripped:
                                in_block_comment = False
                                stripped = stripped.split('*/',1)[1]
                            else:
                                continue

                        if '/*' in stripped:
                            if '*/' in stripped:
                                stripped = re.sub(r'/\*.*?\*/', '', stripped)
                            else:
                                in_block_comment = True
                                stripped = stripped.split('/*',1)[0]

                        # 单行注释
                        stripped = re.sub(r'//.*', '', stripped).strip()
                        if not stripped:
                            continue

                        match = include_pattern.search(stripped)
                        if match:
                            include_file = match.group(1)

                            # 优先查找同目录
                            candidate = os.path.join(dirpath, include_file)
                            if os.path.exists(candidate):
                                include_path = os.path.abspath(candidate)
                            else:
                                # 在整个根目录搜索
                                include_path = None
                                for root, subdirs, files in os.walk(root_dir):
                                    subdirs[:] = [d for d in subdirs if d.lower() != ".svn"]
                                    if os.path.basename(include_file) in files:
                                        include_path = os.path.abspath(os.path.join(root, include_file))
                                        break
                                # 如果没找到，保留源码写法
                                if include_path is None:
                                    include_path = include_file

                            includes.append(include_path)

                if includes:
                    dependency_map[full_path] = includes

            except Exception as e:
                print(f"⚠️ 读取失败: {full_path} - {e}")

# --------------------------
# 3️⃣ 生成树形结构
# --------------------------
def build_tree(file_path, prefix='', visited=None):
    if visited is None:
        visited = set()
    lines = []
    if file_path in visited:
        lines.append(prefix + "(循环依赖)")
        return lines
    visited.add(file_path)

    if file_path not in dependency_map:
        return lines

    deps = dependency_map[file_path]
    count = len(deps)
    for i, dep in enumerate(deps):
        branch = "└─ " if i == count - 1 else "├─ "
        sub_prefix = "   " if i == count - 1 else "│  "

        lines.append(prefix + branch + dep)

        # 递归：如果依赖对象在 dependency_map 中，继续生成子树
        if dep in dependency_map:
            lines.extend(build_tree(dep, prefix + sub_prefix, visited.copy()))

    return lines

# --------------------------
# 主流程
# --------------------------
src_dirs = find_src_dirs(root_dir)
print(f"🔍 找到 {len(src_dirs)} 个 src 文件夹。")

for src in src_dirs:
    print(f"  → 分析 {src}")
    analyze_includes(src)

# --------------------------
# 输出树形 txt
# --------------------------
output_file = os.path.join(root_dir, "dependencies_tree.txt")
with open(output_file, 'w', encoding='utf-8') as f:
    for top_file in dependency_map:
        f.write(top_file + "\n")
        tree_lines = build_tree(top_file, '')
        for line in tree_lines:
            f.write(line + "\n")
        f.write("\n")

print(f"\n✅ 依赖树已输出到：{output_file}")
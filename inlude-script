import os
import re
from collections import defaultdict
from concurrent.futures import ThreadPoolExecutor
import io

# --------------------------
# 設定
# --------------------------
root_dir = r"C:\path\to\your\root"  # 根目录
project_name = "ProjectA"            # 只分析 ProjectA
extensions = ('.cpp', '.c', '.h', '.hpp')
include_pattern = re.compile(r'#include\s+[<"](.+?)[>"]')

# --------------------------
# 1️⃣ 构建文件索引（root 下所有项目文件，用于跨项目查找）
# --------------------------
file_index = defaultdict(list)
for dirpath, dirnames, filenames in os.walk(root_dir):
    dirnames[:] = [d for d in dirnames if d.lower() != ".svn"]
    for filename in filenames:
        if filename.endswith(extensions):
            file_index[filename].append(os.path.abspath(os.path.join(dirpath, filename)))

# --------------------------
# 2️⃣ 收集 ProjectA/src 顶层分析对象
# --------------------------
project_a_src = os.path.join(root_dir, project_name, "src")
top_files = []
for dirpath, dirnames, filenames in os.walk(project_a_src):
    dirnames[:] = [d for d in dirnames if d.lower() != ".svn"]
    for filename in filenames:
        if filename.endswith(extensions):
            top_files.append(os.path.abspath(os.path.join(dirpath, filename)))

# --------------------------
# 3️⃣ 收集 root 下所有文件（用于全局依赖去重）
# --------------------------
all_root_files = []
for dirpath, dirnames, filenames in os.walk(root_dir):
    dirnames[:] = [d for d in dirnames if d.lower() != ".svn"]
    for filename in filenames:
        if filename.endswith(extensions):
            all_root_files.append(os.path.abspath(os.path.join(dirpath, filename)))
all_root_files = set(all_root_files)

# --------------------------
# 4️⃣ 文件解析函数
# --------------------------
global_seen_in_root = set()  # root 下依赖对象全局去重

def parse_file(full_path):
    includes_list = []
    try:
        with open(full_path, 'r', encoding='utf-8', errors='ignore') as f:
            in_block_comment = False
            for line in f:
                stripped = line.strip()
                # 多行注释
                if in_block_comment:
                    if '*/' in stripped:
                        in_block_comment = False
                        stripped = stripped.split('*/',1)[1]
                    else:
                        continue
                if '/*' in stripped:
                    if '*/' in stripped:
                        stripped = re.sub(r'/\*.*?\*/', '', stripped)
                    else:
                        in_block_comment = True
                        stripped = stripped.split('/*',1)[0]
                # 单行注释
                stripped = re.sub(r'//.*', '', stripped).strip()
                if not stripped:
                    continue

                match = include_pattern.search(stripped)
                if match:
                    include_file = match.group(1)
                    if include_file.startswith('<') or include_file.startswith('/'):
                        continue

                    candidate = os.path.join(os.path.dirname(full_path), include_file)
                    if os.path.exists(candidate):
                        include_path = os.path.abspath(candidate)
                    else:
                        basename = os.path.basename(include_file)
                        if basename in file_index:
                            # 仅同名 cpp 补全在同目录
                            if basename.endswith(('.cpp','.c')):
                                dir_of_header = os.path.dirname(full_path)
                                for path_candidate in file_index[basename]:
                                    if os.path.dirname(path_candidate) == dir_of_header:
                                        include_path = path_candidate
                                        break
                                else:
                                    continue
                            else:
                                include_path = file_index[basename][0]
                        else:
                            continue

                    if include_path in all_root_files:
                        if include_path not in global_seen_in_root:
                            global_seen_in_root.add(include_path)
                            includes_list.append(include_path)
                    else:
                        includes_list.append(include_path)

    except Exception as e:
        print(f"⚠️ 读取失败: {full_path} - {e}")

    return full_path, includes_list

# --------------------------
# 5️⃣ 多线程解析顶层文件（不显示进度条）
# --------------------------
dependency_map = {}
with ThreadPoolExecutor(max_workers=os.cpu_count() or 4) as executor:
    for full_path, includes in executor.map(parse_file, top_files):
        if includes:
            dependency_map[full_path] = includes

# --------------------------
# 6️⃣ 树形生成（递归，root 下依赖全局去重）
# --------------------------
def build_tree_lines(file_path, prefix='', visited_local=None, visited_global=None):
    if visited_local is None:
        visited_local = set()
    if visited_global is None:
        visited_global = set()

    if file_path in visited_local:
        return [prefix + "(循環依存)"]
    visited_local.add(file_path)

    lines = []
    deps = dependency_map.get(file_path, [])
    count = len(deps)
    for i, dep in enumerate(deps):
        branch = "└─ " if i == count - 1 else "├─ "
        sub_prefix = "   " if i == count - 1 else "│  "

        # root 下依赖全局去重
        if dep in all_root_files:
            if dep in visited_global:
                continue
            visited_global.add(dep)

        lines.append(prefix + branch + dep)
        if dep in dependency_map:
            lines.extend(build_tree_lines(dep, prefix + sub_prefix,
                                          visited_local.copy(),
                                          visited_global))
    visited_local.remove(file_path)
    return lines

# --------------------------
# 7️⃣ 写入 TXT（边生成边写入，不显示进度条）
# --------------------------
output_file = os.path.join(root_dir, f"{project_name}_dependencies_tree.txt")

with io.open(output_file, 'w', encoding='utf-8', buffering=1024*1024) as f:  # 1MB 缓冲
    for top_file in dependency_map:
        f.write(top_file + "\n")
        tree_lines = build_tree_lines(top_file)
        for line in tree_lines:
            f.write(line + "\n")
        f.write("\n")

print(f"\n✅ {project_name} 依赖树已输出到：{output_file}")